<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright Â© 2011-2012 by Renaud Guillard (dev@nore.fr) -->
<!-- Distributed under the terms of the MIT License, see LICENSE -->
<xbl:bindings xmlns:xbl="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<xbl:binding id="fsbutton">
		<xbl:content>
			<xul:button label="Browse..." oncommand="browse()" />
		</xbl:content>
		<xbl:implementation>
			<!-- Properties -->
			<xbl:property name="disabled" onget="return this.buttonControl.disabled" onset="this.buttonControl.disabled = val" />
			<xbl:property name="dialogmode">
				<xbl:getter>
					return this.filebox.mode;
				</xbl:getter>
				<xbl:setter>
					if ((val == "file") || (val == "folder") || (val == "save" || (val == "multi")))
					{
					this.filebox.mode = val;
					}

					return this.filebox.mode;
				</xbl:setter>
			</xbl:property>

			<xbl:property name="filters">
				<xbl:getter>
					return this.filters;
				</xbl:getter>
				<xbl:setter>
					this.filebox.importFilters(val);
					return this.filebox.filters;
				</xbl:setter>
			</xbl:property>

			<xbl:property name="value">
				<xbl:getter><![CDATA[ 
					return this.m_values[0]; 
				]]></xbl:getter>
				<xbl:setter><![CDATA[
					var old = (this.m_values) ? this.m_values[0] : "";
					this.m_values = [];
					this.m_values.push(val);
					var evt = document.createEvent("MutationEvent");
					evt.initMutationEvent ("change", false, true, null, old, val, "value", MutationEvent.MODIFICATION);
					/* eventname, bubbling, cancelable, related
					node, prev, new, attribute, mode*/
					this.dispatchEvent(evt);
				]]></xbl:setter>
			</xbl:property>

			<xbl:property name="values">
				<xbl:getter>
					return this.m_values;
				</xbl:getter>
			</xbl:property>
			
			<xbl:property name="itemCount">
				<xbl:getter>
					return this.m_values.length;
				</xbl:getter>
			</xbl:property>

			<xbl:property name="basename" readonly="true">
				<xbl:getter><![CDATA[
					var res = "";
					try
					{
						var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
						file.initWithPath(this.value);
						return file.leafName;
					}
					catch(e){}

					return this.value;
				]]></xbl:getter>
			</xbl:property>

			<xbl:property name="dirname" readonly="true">
				<xbl:getter><![CDATA[
					var res = "";
					try
					{
						var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
						file.initWithPath(this.value);
						if (file.parent)
						{
							return file.parent.path;
						}

						return ".";
					}
					catch(e)
					{}

					return this.value;
				]]></xbl:getter>
			</xbl:property>

			<xbl:constructor>
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					dump("fsbutton constructor error: " + e + "\n");
					return;
				}
				this.filebox = new FSItemSelectionDialog(window);
				this.buttonControl = document.getAnonymousNodes(this)[0];
				
				this.m_values = [];
				this.m_values[0] = this.getAttribute("default");
				
				if (this.getAttribute("dialogtitle"))
				{
					this.filebox.title = this.getAttribute("dialogtitle");
				}
				
				if (this.getAttribute("dialogmode"))
				{
					this.dialogmode = this.getAttribute("dialogmode");
				}
				
				this.filters = this.getAttribute("filters");
			</xbl:constructor>

			<xbl:method name="browse">
				<xbl:parameter name="settings" />
				<xbl:body><![CDATA[
				var res = this.filebox.browse();
				if (res.isValid)
				{
					if (this.dialogmode == "multi")
					{
						var old = this.m_values;
						this.m_values = [];
						for (var i in res.paths)
						{
							this.m_values.push(res.paths[i]);	
						}
						var evt = document.createEvent("MutationEvent");
						evt.initMutationEvent ("change", false, true, null, old, this.m_values, "values", MutationEvent.MODIFICATION);
						this.dispatchEvent(evt);
					}
					else
					{
						this.value = res.path;
					}
				}
				]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<xbl:binding id="itemarrangementbuttonbox">
		<xbl:content>
			<xul:vbox>
				<xul:button label="Remove" xbl:inherits="label=removeLabel" oncommand="remove();" />
				<xul:button label="Move up" xbl:inherits="label=moveUpLabel" oncommand="moveUp();" />
				<xul:button label="Move down" xbl:inherits="label=moveDownLabel" oncommand="moveDown();" />
			</xul:vbox>
		</xbl:content>

		<xbl:implementation>
			<xbl:field name="targetId" />
			<xbl:property name="disabled" onget="return this.buttonContainer.disabled">
				<xbl:setter>
					this.buttonContainer.disabled = val;
					this.updateState("disabled");
				</xbl:setter>
			</xbl:property>
			<xbl:property name="validTarget" readonly="true">
				<xbl:getter><![CDATA[
					if (this.target)
					{
						var f = ["insertItemAt", "removeItemAt", "getItemAtIndex", "insertBefore"];
						for (var i in f)
						{
							if (typeof(this.target[f[i]]) != "function")
							{
								return false;
							}
						} 
						return true;
					}

					return false;
				]]></xbl:getter>
			</xbl:property>

			<xbl:property name="maxItems" onset="this.setAttribute('maxItems', val)">
				<xbl:getter><![CDATA[
					var v = parseInt(this.getAttribute('maxItems'));
					if (isNaN(v) || v < 0)
					{
						return 0;
					}
					
					return v;
				]]></xbl:getter>
			</xbl:property>

			<xbl:property name="acceptItems">
				<xbl:getter><![CDATA[
					if (!this.validTarget)
					{
						return false;
					}
					
					if ((this.maxItems <= 0) || (this.target.itemCount < this.maxItems))
					{
						return true;
					}
					
					return false;
				]]></xbl:getter>
			</xbl:property>

			<xbl:constructor>
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					//alert("itemarrangementbuttonbox constructor error: " + e);
					return;
				}
				
				var targetId = this.getAttribute("targetId");
				if (targetId)
				{
					this.target = document.getElementById(targetId);
				}
				this.eventForwarder = new EventForwarder(this, this.handleTargetSelect);
				if (this.validTarget)
				{
					this.target.addEventListener("select", this.eventForwarder, false);
				}
				this.buttonContainer = document.getAnonymousNodes(this)[0];
				this.removeButton = document.getAnonymousNodes(this)[0].children[0];
				this.upButton = document.getAnonymousNodes(this)[0].children[1];
				this.downButton = document.getAnonymousNodes(this)[0].children[2];
				this.updateState("ctor");
			</xbl:constructor>

			<xbl:destructor>
				if (this.validTarget)
				{
					this.target.removeEventListener("select", this.eventForwarder, false); 
				}
			</xbl:destructor>

			<xbl:method name="handleTargetSelect">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body>
					object.updateState("handleTargetSelect");
				</xbl:body>
			</xbl:method>

			<xbl:method name="addElement">
				<xbl:parameter name="label" />
				<xbl:parameter name="value" />
				<xbl:parameter name="index">-1</xbl:parameter>
				<xbl:body><![CDATA[
					if (!this.acceptItems)
					{
						return;
					}
					
					var i = (index && (index >= 0)) ? index : this.target.itemCount;
					this.target.insertItemAt(i, label, value ? value : label);
					this.updateState("addElement");
				]]></xbl:body>
			</xbl:method>

			<xbl:method name="updateState">
				<xbl:parameter name="from" />
				<xbl:body><![CDATA[
					if (!this.validTarget || this.buttonContainer.disabled)
					{
						this.upButton.setAttribute("disabled", true);
						this.downButton.setAttribute("disabled", true);
						this.removeButton.setAttribute("disabled", true);
						return;
					}
									
					if ((this.target.itemCount > 1) && (this.target.selectedIndex >= 0))
					{
						if (this.target.selectedIndex > 0)
						{
							this.upButton.removeAttribute("disabled");
						}
						else
						{
							this.upButton.setAttribute("disabled", true);
						}
												
						if (this.target.selectedIndex != (this.target.itemCount - 1))
						{
							this.downButton.removeAttribute("disabled");
						}
						else
						{
							this.downButton.setAttribute("disabled", true);
						}
					}
					else
					{
						this.upButton.setAttribute("disabled", true);
						this.downButton.setAttribute("disabled", true);
					}
					
					if (this.target.itemCount > 0 && this.target.selectedIndex >= 0)
					{
						this.removeButton.removeAttribute("disabled");
					}
					else
					{
						this.removeButton.setAttribute("disabled", true);
					}
					
					// Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("updateState " + this.id + " from " + from + "\n");
					var evt = document.createEvent("UIEvents");
					evt.initUIEvent("change", false, true, window, 1); 
					/* event type, bubbling, cancelable*/
					this.target.dispatchEvent(evt);
				]]></xbl:body>
			</xbl:method>

			<xbl:method name="remove">
				<xbl:parameter name="event" />
				<xbl:body><![CDATA[
					if (!this.validTarget)
					{
						return;
					}
					
					var i = this.target.selectedIndex;
					this.target.removeItemAt(i);
					this.target.selectedIndex = (this.target.itemCount > 0) 
								? ((i < this.target.itemCount) ? i : (this.target.itemCount - 1)) 
								: -1;
					this.updateState("remove");
				]]></xbl:body>
			</xbl:method>

			<xbl:method name="moveUp">
				<xbl:parameter name="event" />
				<xbl:body>
					if (!this.validTarget)
					{
					return;
					}

					var i = this.target.selectedIndex;
					var e = this.target.getItemAtIndex(i);
					var p = e.previousSibling;
					this.target.insertBefore(e, p);
					this.target.selectedIndex = i - 1;
					this.updateState("moveUp");
				</xbl:body>
			</xbl:method>

			<xbl:method name="moveDown">
				<xbl:parameter name="event" />
				<xbl:body>
					if (!this.validTarget)
					{
					return;
					}

					var i = this.target.selectedIndex;
					var e = this.target.getItemAtIndex(i);
					var n = e.nextSibling;
					this.target.insertBefore(n, e);
					this.target.selectedIndex = i + 1;
					this.updateState("moveDown");
				</xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>
</xbl:bindings>
