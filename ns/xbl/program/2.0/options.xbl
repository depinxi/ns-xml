<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2011 by Renaud Guillard (dev@niao.fr) -->
<xbl:bindings xmlns:xbl="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<xbl:binding id="optionBase">
		<xbl:implementation>
			<xbl:property name="disabled">
				<xbl:getter>
					if (this.controls)
					{
						return this.controls[0].disabled;
					}
				</xbl:getter>
				<xbl:setter><![CDATA[
					if (!this.controls)
					{
						return;
					}
					
					for (var i in this.controls)
					{
						this.controls[i].disabled = val;	
					}
					return;
				]]></xbl:setter>
			</xbl:property>
			<xbl:property name="required" onget="return this.getAttribute('required');" />
			<xbl:constructor>
				this.controls = null;
				this.usedControlIndex = 0;
				this.usedControlChangeEventListener = null;
			</xbl:constructor>
			<xbl:destructor>
				if (this.usedControlChangeEventListener)
				{
					this.controls[this.usedControlIndex].removeEventListener("command", this.usedControlChangeEventListener, true);
				}
			</xbl:destructor>
			<xbl:method name="handleChange">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body><![CDATA[
					var evt = document.createEvent("UIEvents");
					// event type, bubbling, cancelable
					evt.initUIEvent("change", false, true, window, 1);
					evt.optionControl = event.target;  
					object.dispatchEvent(evt);
					return false;
				]]></xbl:body>
			</xbl:method>
			<xbl:method name="selectControl">
				<xbl:parameter name="usedControlIndex" />
				<xbl:body><![CDATA[
					var nodeHelper = new NodeHelper();
					this.usedControlIndex = usedControlIndex;
					if (usedControlIndex > 0 && this.controls)
					{
						this.usedControlChangeEventListener = new EventForwarder(this, this.handleChange)
						this.controls[this.usedControlIndex].addEventListener("command", this.usedControlChangeEventListener, true);
					}
					
					nodeHelper.showOnly(this.controls, this.usedControlIndex);
				]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<!-- An option group -->
	<!-- Depending on parent presence, self group type and parents group type The control choose between a simple label, a checkbox or a radio button -->
	<xbl:binding id="groupOption" extends="resource://ns/xbl/program/2.0/options.xbl#optionBase">
		<xbl:content />
		<xbl:implementation>
			<xbl:property name="optionType" readonly="true" onget="return 'group';" />
			<xbl:property name="groupType" readonly="true" onget="return this.m_groupType;" />
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
				if (this.required)
				{
					return true;
				}
				
				if (this.parent)
				{
					if (!(this.parent.isSet))
					{
						return false;
					}
					
					if ((this.parent.groupType == "exclusive"))
					{
						return this.radioControl.selected;
					}
				}
				
				if (this.groupType == "exclusive")
				{
					return this.checkboxControl.checked;
				}
								
				return true;
				]]></xbl:getter>
				<xbl:setter><![CDATA[
				this.checkboxControl.checked = val;				
				]]></xbl:setter>
			</xbl:property>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("groupOption constructor error: " + e);
					return;
				}
							
				this.m_groupType = "standard";
				var groupType = this.getAttribute("groupType");
				if (groupType != null)
				{
					this.m_groupType = groupType;
				}
				
				this.labelControl = document.getElementById(this.id + ":label");
				this.checkboxControl = document.getElementById(this.id + ":checkbox");
				this.radioControl = document.getElementById(this.id + ":radio");
				this.controls = [this.labelControl, this.checkboxControl, this.radioControl];
				
				var parentId = this.getAttribute("parentId");
				if (parentId)
				{
					this.parent = document.getElementById (parentId);
				}
			]]></xbl:constructor>
			<xbl:method name="initialize">
				<xbl:body><![CDATA[
				Components.utils.import("resource://ns/xbl/controls.jsm");
				// Label
				var usedControlIndex = 0;
				if (!this.required)
				{
					if (this.groupType == "exclusive")
					{
						// checkbox
						usedControlIndex = 1;
					}
					else if (this.parent && (this.parent.groupType == "exclusive"))
					{
						// radio
						usedControlIndex = 2;
					}
				}
				
				this.selectControl(usedControlIndex);
				
				// TODO if (not exclusive and no default) only
				var radiogroup = document.getElementById(this.id + ":group");
				radiogroup.selectedIndex = -1;
				
			]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<!-- Switch option control -->
	<!-- Expect to be bound to any kind of box -->
	<!-- * No parent or 'normal' parent -> checkbox -->
	<!-- * exclusive group -> radio -->
	<xbl:binding id="switchOption" extends="resource://ns/xbl/program/2.0/options.xbl#optionBase">
		<xbl:content />
		<xbl:implementation>
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
				if (this.parent)
				{
					if (!this.parent.isSet)
					{
						return false;
					}
					
					if (this.parent.groupType == "exclusive")
					{
						return this.radioControl.selected;
					}
				}
						
				return this.checkboxControl.checked;
				]]></xbl:getter>
			</xbl:property>
			<xbl:property name="optionType" readonly="true" onget="return 'switch';" />
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("switchOption constructor error: " + e);
					return;
				}
				
				this.labelControl = document.getElementById(this.id + ":label");
				this.checkboxControl = document.getElementById(this.id + ":checkbox");
				this.radioControl = document.getElementById(this.id + ":radio");
				this.controls = [this.labelControl, this.checkboxControl, this.radioControl];
				
				var parentId = this.getAttribute("parentId");
				if (parentId)
				{
					this.parent = document.getElementById (parentId);
				}
			]]></xbl:constructor>
			<xbl:method name="initialize">
				<xbl:body><![CDATA[
				Components.utils.import("resource://ns/xbl/controls.jsm");
				var usedControlIndex = 1;
				if (this.parent && this.parent.groupType == "exclusive")
				{
					usedControlIndex = 2;
				}
				
				if (usedControlIndex > 0)
				{
					this.controls[usedControlIndex].addEventListener("command", new EventForwarder(this, this.handleChange), true);
				}
								
				this.selectControl(usedControlIndex);
			]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<!-- Argument option -->
	<xbl:binding id="argumentOption" extends="resource://ns/xbl/program/2.0/options.xbl#optionBase">
		<xbl:implementation>
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
				if (this.parent)
				{
					if (!this.parent.isSet)
					{
						return false;
					}
					
					if ((this.parent.groupType == "exclusive") && !this.radioControl.selected)
					{
						return false;
					}
				}
								
				if (!this.valueControl)
				{
					return false;
				}
				
				return this.valueControl.isSet;
				]]></xbl:getter>
			</xbl:property>
			<xbl:property name="optionType" readonly="true" onget="return 'argument';" />
			<xbl:property name="value" readonly="true">
				<xbl:getter><![CDATA[
					if (!this.valueControl)
					{
						return null;
					}
					return this.valueControl.value;
				]]></xbl:getter>
			</xbl:property>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("argumentOption constructor error: " + e);
					return;
				}
				
				this.valueControlChangeEventListener = null;
				
				this.labelControl = document.getElementById(this.id + ":label");
				this.checkboxControl = document.getElementById(this.id + ":checkbox");
				this.radioControl = document.getElementById(this.id + ":radio");
				this.controls = [this.labelControl, this.checkboxControl, this.radioControl];
				
				var parentId = this.getAttribute("parentId");
				if (parentId)
				{
					this.parent = document.getElementById (parentId);
				}
								
				var valueControlId = this.getAttribute("valueControlId");
				if (valueControlId)
				{
					this.valueControl = document.getElementById(valueControlId);
					if (this.valueControl)
					{
						this.valueControlChangeEventListener = new EventForwarder(this, this.handleChange); 
						this.valueControl.addEventListener("change", this.valueControlChangeEventListener, true);
						this.valueControl.addEventListener("select", this.valueControlChangeEventListener, true);
					}
				}
				else
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("argumentOption: missing value control ");
				}
			]]></xbl:constructor>
			<xbl:destructor>
				if (this.valueControlChangeEventListener)
				{
					this.valueControl.removeEventListener("change", this.valueControlChangeEventListener, true);
					this.valueControl.removeEventListener("select", this.valueControlChangeEventListener, true);
				}
			</xbl:destructor>
			<xbl:method name="initialize">
				<xbl:body><![CDATA[
				Components.utils.import("resource://ns/xbl/controls.jsm");
				var usedControlIndex = 0;
				if (this.parent && this.parent.groupType == "exclusive")
				{
					usedControlIndex = 2;
				}
								
				this.selectControl(usedControlIndex);
			]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<!-- Multi aargument option -->
	<xbl:binding id="multiargumentOption" extends="resource://ns/xbl/program/2.0/options.xbl#argumentOption">
		<xbl:implementation>
			<xbl:property name="optionType" readonly="true" onget="return 'multiargument';" />
		</xbl:implementation>
	</xbl:binding>

	<!-- Program value option (anonymous command line argument) -->
	<!-- Basically the same behavior as the single argument except -->
	<xbl:binding id="programValue">
		<xbl:content>
			<xul:label xbl:inherits="value=label,disabled" />
		</xbl:content>
		<xbl:implementation>
			<xbl:field name="index">return this.getAttribute("index");</xbl:field>
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
				if (!this.valueControl)
				{
					this.console.logStringMessage(this.id + ": no value control");
					return false;
				}
				
				return this.valueControl.isSet;
				]]></xbl:getter>
			</xbl:property>
			<xbl:property name="disabled">
				<xbl:getter><![CDATA[
					if (this.valueControl)
					{
						return this.valueControl.disabled;
					}
					return false;
				]]></xbl:getter>
				<xbl:setter><![CDATA[
					if (this.valueControl)
					{
						this.valueControl.disabled = val;
					}
				]]></xbl:setter>
			</xbl:property>
			<xbl:property name="value" readonly="true">
				<xbl:getter><![CDATA[
				if (!this.valueControl)
				{
					this.console.logStringMessage(this.id + ": no value control");
					return false;
				}
				
				return this.valueControl.value;
				]]></xbl:getter>
			</xbl:property>
			<xbl:constructor><![CDATA[
			this.console = Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService);
			var valueControlId = this.getAttribute("valueControlId");
			if (valueControlId)
			{
				this.valueControl = document.getElementById(valueControlId);
				if (this.valueControl)
				{
					this.valueControlChangeEventListener = new EventForwarder(this, this.handleChange);
					this.valueControl.addEventListener("change", this.valueControlChangeEventListener, true);
					this.valueControl.addEventListener("select", this.valueControlChangeEventListener, true);
				}
			}
			]]></xbl:constructor>
			<xbl:destructor>
			if (this.valueControl)
			{
				this.valueControl.removeEventListener("change", this.valueControlChangeEventListener, true);
				this.valueControl.removeEventListener("select", this.valueControlChangeEventListener, true);
			}
			</xbl:destructor>
			<xbl:method name="handleChange">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body>
			<![CDATA[
				var evt = document.createEvent("UIEvents");
				evt.initUIEvent("change", false, true, window, 1); 
				/* event type, bubbling, cancelable*/
				object.dispatchEvent(evt);
				return false;
			]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<!-- Text value (with autocomplete option if requested) -->
	<xbl:binding id="argumentTextValue">
		<xbl:content>
			<xul:textbox flex="1" xbl:inherits="value=default,type,autocompletesearch,autocompletesearchparam,disabled" />
		</xbl:content>
		<xbl:implementation>
			<xbl:property name="disabled" onget="return this.control.disabled" onset="this.control.disabled = val;" />
			<xbl:property name="value">
				<xbl:getter>
					return this.control.value;
				</xbl:getter>
				<xbl:setter>
					this.control.value = val;
				</xbl:setter>
			</xbl:property>
			<xbl:property name="defaultValue" readonly="true" onget="return this.m_defaultValue;" />
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
					//const console = Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService);
					//console.logStringMessage(this.id  + " value = " + this.value + " default: " + this.m_defaultValue);
					return (this.value != this.m_defaultValue);
				]]></xbl:getter>
			</xbl:property>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
					var anonHelper = new AnonymousNodesHelper(document, this);
					this.control = anonHelper.nodes[0];
					this.m_defaultValue = this.getAttribute("default");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage(argumentTextValue + " error: " + e);
					return;
				}
			]]></xbl:constructor>
		</xbl:implementation>
	</xbl:binding>

	<!-- Number box -->
	<xbl:binding id="argumentNumberValue" extends="resource://ns/xbl/program/2.0/options.xbl#argumentTextValue">
		<xbl:implementation>
			<xbl:constructor>
				this.control.setAttribute("type", "number");
				var min = this.getAttribute("min"); 
				if (min != null)
				{
					this.control.setAttribute("min", min);
				}
				var max = this.getAttribute("max"); 
				if (max != null)
				{
					this.control.setAttribute("max", max);
				}
				
				var decimal = this.getAttribute("decimal"); 
				if (decimal != null)
				{
					this.control.setAttribute("decimalplaces", decimal);
				}
			</xbl:constructor>
		</xbl:implementation>
	</xbl:binding>

	<!-- Strict list Have to be bound to a menulist -->
	<xbl:binding id="argumentMenuValue">
		<xbl:content>
			<xul:menulist flex="1" xbl:inherit="disabled">
				<xul:menupopup>
				</xul:menupopup>
			</xul:menulist>

			<xbl:children xbl:includes="xul:menuitem" />
		</xbl:content>
		<xbl:implementation>
			<xbl:property name="disabled" onget="return this.control.disabled" onset="this.control.disabled = val;" />
			<xbl:property name="value">
				<xbl:getter>
					return this.control.value;
				</xbl:getter>
				<xbl:setter><![CDATA[
					for (var i = 0; i < this.control.itemCount; i++)
					{
						var c = this.control.getItemAtIndex(i);
						if (c.value == val)
						{
							this.control.selectedIndex = i;
							return;
						}
					}
					this.control.selectedIndex = -1;
				]]></xbl:setter>
			</xbl:property>
			<xbl:property name="isSet" readonly="true">
				<xbl:getter>
					return (this.control.selectedIndex != this.m_defaultIndex);
				</xbl:getter>
			</xbl:property>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("argumentMenuValue: " + e);
					return;
				}
				
				var anonHelper = new AnonymousNodesHelper(document, this);
				
				this.control = anonHelper.nodes[0];
				
				this.m_defaultIndex = -1;
				while (this.childElementCount > 0)
				{
					this.control.children[0].appendChild(this.children[0]);
				}
				
				for (var i = 0; i < this.control.itemCount; i++)
				{
					var c = this.control.getItemAtIndex(i);
					if (c.selected)
					{
						this.m_defaultIndex = i;
						return;
					}
				}
				
				if (this.m_defaultIndex < 0)
				{
					this.control.insertItemAt(0, "", "");
					this.control.selectedIndex = 0;
					this.m_defaultIndex = 0;
				}
			]]></xbl:constructor>
		</xbl:implementation>
	</xbl:binding>

	<!-- Path argument value -->
	<xbl:binding id="argumentPathValue">
		<xbl:content>
			<xul:hbox flex="1">
				<xul:textbox flex="1" xbl:inherits="value=default,type,autocompletesearch,autocompletesearchparam,disabled" />
				<xul:box class="fsbutton" xbl:inherits="label,dialogtitle,filters,dialogmode,disabled" onchange="handleFsButtonChange(this.value); return false;" />
			</xul:hbox>
		</xbl:content>
		<xbl:implementation>
			<xbl:property name="disabled" onget="return this.textControl.disabled" onset="this.fsButtonControl.disabled = this.textControl.disabled = val;" />
			<xbl:property name="value">
				<xbl:getter>
					return this.fsButtonControl.value;
				</xbl:getter>
				<xbl:setter><![CDATA[
					this.fsButtonControl.value = val;
				]]></xbl:setter>
			</xbl:property>
			<xbl:property name="isSet" readonly="true">
				<xbl:getter><![CDATA[
					return ((this.value.length > 0) && (this.value != this.m_defaultValue))
				]]></xbl:getter>
			</xbl:property>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("switchOption constructor error: " + e);
					return;
				}
				
				var anonHelper = new AnonymousNodesHelper(document, this);
				
				this.textControl = anonHelper.nodes[0].children[0];
				this.fsButtonControl = anonHelper.nodes[0].children[1];
				this.m_defaultValue = this.getAttribute("default");
				
				this.textFocusHandler = new EventForwarder(this, this.handleTextFocus);
				this.textBlurHandler = new EventForwarder(this, this.handleTextBlur);
				this.textChangeHandler = new EventForwarder(this, this.handleTextChange);
				this.textControl.addEventListener("focus", this.textFocusHandler, true);
				this.textControl.addEventListener("blur", this.textBlurHandler, true);
				this.textControl.addEventListener("change", this.textChangeHandler, true);
				
				this.value = this.m_defaultValue;			 
			]]></xbl:constructor>
			<xbl:destructor><![CDATA[
				this.textControl.removeEventListener("focus", this.textFocusHandler, true);
				this.textControl.removeEventListener("blur", this.textBlurHandler, true);
				this.textControl.removeEventListener("change", this.textChangeHandler, true);
			]]></xbl:destructor>
			<xbl:method name="handleTextFocus">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body><![CDATA[
					event.target.value = object.value;
					event.target.tooltiptext = null;
				]]></xbl:body>
			</xbl:method>
			<xbl:method name="handleTextBlur">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body><![CDATA[
					var b = object.fsButtonControl.basename;
					if (b.length)
					{
						event.target.value = b;
						event.target.tooltiptext = object.value;
					}
					else
					{
						event.target.value = object.fsButtonControl.value; 
						event.target.tooltiptext = null;
					}
				]]></xbl:body>
			</xbl:method>
			<xbl:method name="handleTextChange">
				<xbl:parameter name="event" />
				<xbl:parameter name="object" />
				<xbl:body><![CDATA[
					try
					{
						object.value = event.target.value;
					}
					catch (e)
					{
						Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage(e);
					}
				]]></xbl:body>
			</xbl:method>
			<xbl:method name="handleFsButtonChange">
				<xbl:parameter name="value" />
				<xbl:body><![CDATA[
					var b = this.fsButtonControl.basename;
					if (b.length)
					{
						this.textControl.value = b;
						this.textControl.tooltiptext = this.value;
					}
					else
					{
						this.textControl.value = this.fsButtonControl.value;
						this.textControl.tooltiptext = null;
					}
					
					var evt = document.createEvent("UIEvents");
					evt.initUIEvent("change", false, true, window, 1); 
					/* event type, bubbling, cancelable*/
					this.dispatchEvent(evt);
					return false;
				]]></xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>

	<xbl:binding id="multiargumentListbox">
		<xbl:content>
			<xul:listbox flex="1" height="50" xbl:inherits="height,disabled" />
		</xbl:content>
		<xbl:implementation>
			<xbl:property name="disabled" onget="return this.control.disabled" onset="this.control.disabled = val;" />
			<xbl:property name="isSet" readonly="true" onget="if (this.control) return (this.control.itemCount > 0); return false;"></xbl:property>
			<xbl:property name="value" readonly="true">
				<xbl:getter><![CDATA[
				var res = Array();
				for (var i = 0; i < this.control.itemCount; i++)
				{
					var item = this.control.getItemAtIndex(i);
					if (item)
					{
						//dump("add " + item + " " + item.value + "\n"); 
						res[i] = item.value;
					}
					else
					{
						break;
					}
				}
				
				//dump(res + " " + res.length + "\n");
				return res;
			]]></xbl:getter>
			</xbl:property>
			<xbl:property name="children" readonly="true" onget="if (this.control) return this.control.children; return null;" />
			<xbl:property name="itemCount" readonly="true" onget="if (this.control) return this.control.itemCount;return 0;" />
			<xbl:property name="selectedIndex" onget="if (this.control) return this.control.selectedIndex; return -1;" onset="if (this.control) this.control.selectedIndex = val;" />
			<xbl:method name="insertItemAt">
				<xbl:parameter name="index" />
				<xbl:parameter name="label" />
				<xbl:parameter name="value" />
				<xbl:body>if (this.control) this.control.insertItemAt(index, label, value);</xbl:body>
			</xbl:method>
			<xbl:method name="removeItemAt">
				<xbl:parameter name="index" />
				<xbl:body>if (this.control) this.control.removeItemAt(index);</xbl:body>
			</xbl:method>
			<xbl:method name="getItemAtIndex">
				<xbl:parameter name="index" />
				<xbl:body>if (this.control) return this.control.getItemAtIndex(index); return null;</xbl:body>
			</xbl:method>
			<xbl:method name="insertBefore">
				<xbl:parameter name="a" />
				<xbl:parameter name="b" />
				<xbl:body>if (this.control) this.control.insertBefore(a, b);</xbl:body>
			</xbl:method>
			<xbl:constructor><![CDATA[
				try
				{
					Components.utils.import("resource://ns/xbl/controls.jsm");
				}
				catch (e)
				{
					Components.classes['@mozilla.org/consoleservice;1'].getService(Components.interfaces.nsIConsoleService).logStringMessage("switchOption constructor error: " + e);
					return;
				}
				
				var anonHelper = new AnonymousNodesHelper(document, this);
				
				this.control = anonHelper.nodes[0];
				this.control.addEventListener("select", this.handleControlOnSelect, true);
			]]></xbl:constructor>
			<xbl:method name="handleControlOnSelect">
				<xbl:parameter name="event" />
				<xbl:body>
					var evt = document.createEvent("UIEvents");
					evt.initUIEvent("select", false, true, window, 1);
					/* event type,
					bubbling, cancelable*/
					element.dispatchEvent(evt);
					return false;
				</xbl:body>
			</xbl:method>
		</xbl:implementation>
	</xbl:binding>
</xbl:bindings>
