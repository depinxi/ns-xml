<?xml version="1.0" encoding="UTF-8"?>
<!--
  This is an informal schema for Mozilla XBL.
  
  by Nickolay Ponomarev <asqueella@gmail.com>
  http://mozilla.doslash.org/xblschema/
  
  The text documentation parts is partially compiled from the reference at developer.mozilla.org 
  and is subject to Creative Commons: Attribution-Sharealike license v2.5 or any later version.
  
  The schema is based on the XBL "spec", published on mozilla.org, but my aim was to 
  represent Mozilla XBL as it is actually implemented.
  
  xxx A type representing script code for use in <getter>/onget/etc. should be introduced
  xxx type.attrib is probably not supported currently.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl">
  <!-- ======= Common ======== -->
  <xs:attributeGroup name="required.id.attrib">
    <xs:attribute name="id" use="required" type="xs:ID">
      <xs:annotation>
        <xs:documentation>Unique identifier for the element.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="id.attrib">
    <xs:attribute name="id" type="xs:ID">
      <xs:annotation>
        <xs:documentation>Unique identifier for the element.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="name.attrib">
    <xs:attribute name="name" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>The name of the field, method, or property. This must be a valid JavaScript
        identifier.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="type.attrib">
    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the scripting language for the object. Not used in current
          implementations.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="readonly.attrib">
    <xs:attribute name="readonly" type="xs:boolean">
      <xs:annotation>
        <xs:documentation> If set to true, the value of the property cannot be changed. If omitted
          (i.e. by default), the property may be changed. Note: only implemented for properties, not
          fields. </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="src.attrib">
    <xs:attribute name="src" use="required" type="xs:anyURI">
      <xs:annotation>
        <xs:documentation>The URI of the resource.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- ======= Entry point ======== -->
  <xs:element name="bindings">
    <xs:annotation>
      <xs:documentation>The root node of an XBL file.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="xbl:binding"/>
      </xs:sequence>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="binding">
    <xs:annotation>
      <xs:documentation>Describes a single binding.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xbl:resources"/>
        <xs:element ref="xbl:content"/>
        <xs:element ref="xbl:implementation"/>
        <xs:element ref="xbl:handlers"/>
      </xs:choice>
      <xs:attributeGroup ref="xbl:required.id.attrib"/>
      <xs:attribute name="extends" type="xs:string">
        <xs:annotation>
          <xs:documentation>Specifies the URI of a binding that this binding inherits from.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="display">
        <xs:annotation>
          <xs:documentation>A string of form 'ns:type' that specifies how the tag is displayed. The
            part before the colon is a namespace prefix so you must bind an appropriate namespace as
            well.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:union memberTypes="xs:string">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:browser"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:button"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:checkbox"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:description"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:editor"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:grippy"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:iframe"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:image"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:label"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:menu"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:menuitem"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:menubar"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:progressmeter"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:radio"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:resizer"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:scrollbar"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:scrollbox"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:spacer"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:splitter"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:titlebar"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:treechildren"/>
              </xs:restriction>
            </xs:simpleType>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="xul:treecol"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:union>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="resources">
    <xs:annotation>
      <xs:documentation>Defines resources used by the binding.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xbl:image"/>
        <xs:element ref="xbl:stylesheet"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="image">
    <xs:annotation>
      <xs:documentation>Declares an image resource used by the binding. The image is loaded as soon
        as the binding is used. You can use this to preload a number of images for later use.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="xbl:src.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="stylesheet">
    <xs:annotation>
      <xs:documentation>Declares a stylesheet used by the binding. The style rules in the stylesheet
        will only be applied to the elements of the binding, not to other elements in the document.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="xbl:src.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="content">
    <xs:annotation>
      <xs:documentation>Specifies new content that is placed inside the bound element. Although you
        can see this content on screen as if it was directly in the file, this content is anonymous
        and is hidden from the normal DOM methods. The only XBL element that can appear inside the
        content tag is the children tag.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="xbl:ContentElement"/>
      <xs:anyAttribute processContents="skip"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="children">
    <xs:annotation>
      <xs:documentation>Specifies the location where any child elements of the bound element are
        placed in the generated content. If the children tag contains content itself, that content
        will become the default content. If the element the binding is attached to contains content,
        the default content will be ignored. If the element does not contain content, the default
        content will be added.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group minOccurs="0" maxOccurs="unbounded" ref="xbl:ContentElementNoChildren"/>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attribute name="includes" type="xs:string">
        <xs:annotation>
          <xs:documentation>Indicates that only certain content should be placed at the insertion
            point specified by the children element. Its value is a list of tag names separated by
            comma. A child will only be placed within the insertion point if it is matched by the
            value in the includes attribute. Only immediate children are matched against the
            selector.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:group name="ContentElement">
    <xs:choice>
      <xs:choice>
        <xs:any namespace="##other" processContents="skip"/>
        <xs:any namespace="##local" processContents="skip"/>
      </xs:choice>
      <xs:element ref="xbl:children"/>
    </xs:choice>
  </xs:group>
  <xs:group name="ContentElementNoChildren">
    <xs:choice>
      <xs:any namespace="##other" processContents="skip"/>
      <xs:any namespace="##local" processContents="skip"/>
    </xs:choice>
  </xs:group>
  <xs:element name="implementation">
    <xs:annotation>
      <xs:documentation>Describes the set of methods and properties that are attached to the bound
        element. Once the binding is attached, these methods and properties can be invoked directly
        from the bound element.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xbl:constructor"/>
        <xs:element ref="xbl:destructor"/>
        <xs:choice>
          <xs:element ref="xbl:field"/>
          <xs:element ref="xbl:property"/>
          <xs:element ref="xbl:method"/>
        </xs:choice>
      </xs:choice>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
      <xs:attribute name="name" type="xs:string"/>
      <xs:attribute name="implements" type="xs:string">
        <xs:annotation>
          <xs:documentation>A comma-separated list of interfaces implemented by the binding.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="constructor" type="xs:string">
    <xs:annotation>
      <xs:documentation>Specifies the binding initialization code, which is called right after the
        binding has just been attached to an element.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="destructor" type="xs:string">
    <xs:annotation>
      <xs:documentation>Specifies the code called when a binding is being detached from an element.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="field">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:name.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
      <xs:attributeGroup ref="xbl:readonly.attrib"/>
    </xs:complexType>
  </xs:element>
  <!-- ======== Property ======== -->
  <xs:element name="property">
    <xs:annotation>
      <xs:documentation>Кepresents a single property of the binding. A property can have an optional
        getter and setter functions, which are called when the property is accessed from a script.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="xbl:PropertyGetter"/>
        <xs:group ref="xbl:PropertySetter"/>
      </xs:choice>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:name.attrib"/>
      <xs:attributeGroup ref="xbl:readonly.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
      <xs:attributeGroup ref="xbl:PropertyGetter"/>
      <xs:attributeGroup ref="xbl:PropertySetter"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="PropertyGetter">
    <xs:sequence>
      <xs:element minOccurs="0" ref="xbl:getter"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="getter">
    <xs:annotation>
      <xs:documentation>The script that gets executed when a specific property gets called. The
          return value of the script represents the value of the property that will be returned to
          the requestor.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PropertyGetter">
    <xs:attribute name="onget" type="xs:string">
      <xs:annotation>
        <xs:documentation>The script that executes when the value of the property is requested. The
          return value of the script represents the value of the property that will be returned to
          the requestor. A property getter can also be specified in a child getter tag.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:group name="PropertySetter">
    <xs:sequence>
      <xs:element minOccurs="0" ref="xbl:setter"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="setter">
    <xs:annotation>
      <xs:documentation>The script that executes when the value of the property is being altered.
          Within the script, the parameter "val" represents the new value being assigned. The script
          should always return the actual value assigned in order to allow for chained assignment
          operations.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="PropertySetter">
    <xs:attribute name="onset" type="xs:string">
      <xs:annotation>
        <xs:documentation>The script that executes when the value of the property is being altered.
          Within the script, the parameter "val" represents the new value being assigned. The script
          should always return the actual value assigned in order to allow for chained assignment
          operations. A property setter can also be specified in a child setter tag.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="method">
    <xs:annotation>
      <xs:documentation>Describes a single method of the binding implementation.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="xbl:parameter"/>
        <xs:element minOccurs="0" ref="xbl:body"/>
      </xs:sequence>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:name.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="parameter">
    <xs:annotation>
      <xs:documentation>Represents a single parameter of a method.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:name.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="body">
    <xs:annotation>
      <xs:documentation>The implementation of the corresponding method. The contents of this tag
            is be the script that is executed when the method is invoked.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xbl:id.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="handlers">
    <xs:annotation>
      <xs:documentation>Contains event handlers that can be attached to the bound element.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="xbl:handler"/>
      </xs:sequence>
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="handler">
    <xs:annotation>
      <xs:documentation>Describes a single event handler for the bound element. The script inside the
        handler is executed when the event handler is matched.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xbl:id.attrib"/>
      <xs:attributeGroup ref="xbl:type.attrib"/>
      <xs:attribute name="event" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Describes the specific event that this handler is listening for. Its value
          can be any legal DOM event name (including custom events created using the DocumentEvent
          interface of the DOM).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="phase">
        <xs:annotation>
          <xs:documentation>Specifies the phase of the event flow that this handler should monitor.
            If a phase is specified, the handler will only be invoked during that phase of the event
            handling process. If no phase is specified, a default of bubbling is assumed.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="capturing"/>
            <xs:enumeration value="target"/>
            <xs:enumeration value="bubbling"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="preventdefault" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>If set to true, the default action of the event is not performed.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="button">
        <xs:annotation>
          <xs:documentation>Causes the event handler to be activated only if the event's button value
            matches the handler's.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
            <xs:enumeration value="2"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="modifiers">
        <xs:annotation>
          <xs:documentation>Imposes a filter on key and mouse handlers. Its value is a whitespace- or
            comma-separated list of modifier keys. Supported modifiers are shift, alt, control,
            meta, accel and accesskey. If present in the list, then the modifier key must be set in
            the DOM event object in order for the handler to be matched. If the modifiers is not
            empty and the modifier is not present in the list, then the modifier key must not be set
            in the DOM event object in order for the handler to be matched.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:list>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="shift">
                  <xs:annotation>
                    <xs:documentation>The Shift key.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="alt">
                  <xs:annotation>
                    <xs:documentation>The Alt key. On the Macintosh, this is the Option key.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="control">
                  <xs:annotation>
                    <xs:documentation>The Control key.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="meta">
                  <xs:annotation>
                    <xs:documentation>The Meta key. On the Macintosh, this is the Command key.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="accel">
                  <xs:annotation>
                    <xs:documentation>The platform's primary accelerator key (the Ctrl key on Windows,
                  Meta on Mac).</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="access">
                  <xs:annotation>
                    <xs:documentation>The key used for keyboard shortcuts on the user's platform (Alt on
                  Windows and Linux, no effect on Mac).</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
                <xs:enumeration value="any">
                  <xs:annotation>
                    <xs:documentation>XXX This is evil.</xs:documentation>
                  </xs:annotation>
                </xs:enumeration>
              </xs:restriction>
            </xs:simpleType>
          </xs:list>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="keycode" type="xs:string">
        <xs:annotation>
          <xs:documentation>Imposes a filter on key handlers. Its value is a key identifier for a
              specific keycode, e.g., VK_ENTER.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="charcode" type="xs:string">
        <xs:annotation>
          <xs:documentation>Imposes a filter on the key handler. Its value is a single character,
              e.g., "z". If this attribute is present, then its value must match the charcode field
              of the DOM key event object in order for the handler to fire. Same as the "key"
              attribute.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="key" type="xs:string">
        <xs:annotation>
          <xs:documentation>Imposes a filter on the key handler. Its value is a single character,
              e.g., "z". If this attribute is present, then its value must match the charcode field
              of the DOM key event object in order for the handler to fire. Same as the "charcode"
              attribute.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="group">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="system"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="action" type="xs:string">
        <xs:annotation>
          <xs:documentation>Contains script that is invoked when the handler fires. The handler
            script can also be specified as a child of the element.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
