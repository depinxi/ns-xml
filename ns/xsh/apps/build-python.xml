<?xml version="1.0" encoding="utf-8"?>
<!-- {} -->
<prg:program xmlns:prg="http://xsd.nore.fr/program" xmlns:xi="http://www.w3.org/2001/XInclude" version="2.0">
	<prg:name>build-python</prg:name>
	<prg:author>Renaud Guillard</prg:author>
	<prg:version>1.0</prg:version>
	<prg:copyright>Copyright Â© 2018 - 2020 by Renaud Guillard</prg:copyright>
	<prg:license>Distributed under the terms of the MIT License, see LICENSE</prg:license>
	<prg:documentation>
		<prg:abstract>...</prg:abstract>
	</prg:documentation>
	<prg:ui>
		<prg:label>Python parser generator</prg:label>
	</prg:ui>
	<prg:options>
		<prg:group>
			<prg:documentation>
				<prg:abstract>Input</prg:abstract>
			</prg:documentation>
			<prg:options>
				<!-- program interface XML definition file -->
				<xi:include href="options.xml" xpointer="xmlns(prg=http://xsd.nore.fr/program) xpointer(//prg:argument[@id = 'nsxml.option.requiredXmlProgramDescriptionPath'])" />
				<!-- Skip validation -->
				<xi:include href="options.xml" xpointer="xmlns(prg=http://xsd.nore.fr/program) xpointer(//prg:switch[@id = 'nsxml.option.skipValidation'])" />
			</prg:options>
		</prg:group>

		<prg:group id="python.generationoptions">
			<prg:documentation>
				<prg:abstract>Generation options</prg:abstract>
			</prg:documentation>
			<prg:options>
				<prg:group type="exclusive" required="true" id="python.generationmode">
					<prg:databinding>
						<prg:variable>generationMode</prg:variable>
					</prg:databinding>
					<prg:documentation>
						<prg:abstract>Generation mode</prg:abstract>
						<prg:details>Select what to generate</prg:details>
					</prg:documentation>
					<prg:options>
						<prg:switch>
							<prg:databinding>
								<prg:variable>generateBase</prg:variable>
							</prg:databinding>
							<prg:documentation>
								<prg:abstract>Generate ns-xml parser base module only</prg:abstract>
							</prg:documentation>
							<prg:names>
								<prg:long>base</prg:long>
								<prg:short>b</prg:short>
							</prg:names>
						</prg:switch>
						<prg:argument>
							<prg:databinding>
								<prg:variable>generateInfo</prg:variable>
							</prg:databinding>
							<prg:documentation>
								<prg:abstract>Generate program info module</prg:abstract>
								<prg:details>The given argument must be the name of the 
								the Parser base module (ex: 'Parser')</prg:details>
							</prg:documentation>
							<prg:names>
								<prg:long>info</prg:long>
								<prg:short>i</prg:short>
							</prg:names>
						</prg:argument>
						<prg:switch>
							<prg:databinding>
								<prg:variable>generateEmbedded</prg:variable>
							</prg:databinding>
							<prg:documentation>
								<prg:abstract>Generate parser base and program info modules in a single file</prg:abstract>
							</prg:documentation>
							<prg:names>
								<prg:long>embed</prg:long>
								<prg:short>e</prg:short>
							</prg:names>
						</prg:switch>
						<prg:argument>
							<prg:databinding>
								<prg:variable>generateMerge</prg:variable>
							</prg:databinding>
							<prg:documentation>
								<prg:abstract>Generate and merge with program script</prg:abstract>
								<prg:details>
									Generate parser base and program info modules and merge the result with
									the given python script
								</prg:details>
							</prg:documentation>
							<prg:names>
								<prg:long>merge</prg:long>
								<prg:short>m</prg:short>
							</prg:names>
						</prg:argument>
					</prg:options>
				</prg:group>
				<prg:argument id="python.programclassname">
					<prg:databinding>
						<prg:variable>programInfoClassname</prg:variable>
					</prg:databinding>
					<prg:documentation>
						<prg:abstract>Program info class name</prg:abstract>
					</prg:documentation>
					<prg:names>
						<prg:long>classname</prg:long>
						<prg:short>c</prg:short>
					</prg:names>
				</prg:argument>
			</prg:options>
		</prg:group>

		<prg:group>
			<prg:documentation>
				<prg:abstract>Output</prg:abstract>
			</prg:documentation>
			<prg:options>
				<!-- Output folder -->
				<prg:argument id="python.outputScriptFilePath" required="true">
					<prg:databinding>
						<prg:variable>outputScriptFilePath</prg:variable>
					</prg:databinding>
					<prg:documentation>
						<prg:abstract>Generated file path</prg:abstract>
					</prg:documentation>
					<prg:names>
						<prg:short>o</prg:short>
						<prg:long>output</prg:long>
					</prg:names>
					<prg:type>
						<prg:path>
							<prg:kinds>
								<prg:file />
							</prg:kinds>
							<prg:patterns>
								<prg:pattern>
									<prg:name>Python file</prg:name>
									<prg:rules>
										<prg:rule>
											<prg:endWith>.py</prg:endWith>
										</prg:rule>
									</prg:rules>
								</prg:pattern>
							</prg:patterns>
						</prg:path>
					</prg:type>
				</prg:argument>
			</prg:options>
		</prg:group>

		<!-- ns-xml path -->
		<xi:include href="options.xml" xpointer="xmlns(prg=http://xsd.nore.fr/program) xpointer(//prg:group[@id = 'nsxml.option.nsxmlPathGroup'])" />
		<!-- Help -->
		<xi:include href="../lib/options/options.xml" xpointer="xmlns(prg=http://xsd.nore.fr/program) xpointer(//prg:switch[@id = 'prg.option.displayHelp'])" />
	</prg:options>
</prg:program>
