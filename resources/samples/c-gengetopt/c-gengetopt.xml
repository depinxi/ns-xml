<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright Â© 2012 by Renaud Guillard (dev@niao.fr) -->
<prg:program xmlns:prg="http://xsd.nore.fr/program" version="2.0" xmlns:xi="http://www.w3.org/2001/XInclude">
	<prg:name>c-gengetopt</prg:name>
	<prg:author>Renaud Guillard</prg:author>
	<prg:version>1.0</prg:version>
	<prg:license>Copyright (c) 2012 by Renaud Guillard (dev@niao.fr)</prg:license>
	<prg:documentation>
		<prg:abstract>XML to gengetopt</prg:abstract>
	</prg:documentation>
	<prg:options>
		<!-- Basic argument -->
		<prg:argument>
			<prg:databinding>
				<prg:variable>useless</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>Abstract text</prg:abstract>
				<prg:details>
					Detailed text with
					<prg:br />
					with line break etc.
				</prg:details>
			</prg:documentation>
			<prg:names>
				<prg:long>arg</prg:long>
				<prg:short>a</prg:short>
			</prg:names>
		</prg:argument>

		<prg:switch>
			<prg:databinding>
				<prg:variable>uselessToo</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>A switch</prg:abstract>
				<prg:details>
					If the .ggo file was generated using prg.c.ggo.allSwitchesAsEnum = 'yes' (the default),
					The switch will be translated into a yes/no enum with optional argument where (yes == 1), (no == 0) and
					the default value is set to "no" (0).
					<prg:br />
					Note that the naughty user may write '--switch=no'. So, the correct C code to check if the switch was
					set is:
					<prg:block>
						if (args_info.switch_given &amp;&amp; (args_info.switch_arg == 1)
						<prg:endl />
						{
						<prg:endl />
						// switch set
						<prg:endl />
						}
					</prg:block>
					If the .ggo file was generated using prg.c.ggo.allSwitchesAsEnum = 'no', a switch is translated into a
					'flag off' option.
					<prg:endl />
					Attention: Since flag-type options can't appear in a group,
					this rule only apply for standalone switches and switches inside a non-exclusive group.
				</prg:details>
			</prg:documentation>
			<prg:names>
				<prg:long>switch</prg:long>
				<prg:short>b</prg:short>
			</prg:names>
		</prg:switch>

		<prg:argument>
			<prg:databinding>
				<prg:variable>stillUseless</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>A number-type with no decimals becomes an int</prg:abstract>
			</prg:documentation>
			<prg:names>
				<prg:long>int</prg:long>
				<prg:short>c</prg:short>
			</prg:names>
			<prg:type>
				<prg:number />
			</prg:type>
		</prg:argument>

		<prg:argument>
			<prg:databinding>
				<prg:variable>uselessAgain</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>A number-type with decimals becomes a float</prg:abstract>
			</prg:documentation>
			<prg:names>
				<prg:long>float</prg:long>
				<prg:short>d</prg:short>
			</prg:names>
			<prg:type>
				<prg:number decimal="2" />
			</prg:type>
		</prg:argument>

		<prg:multiargument>
			<prg:databinding>
				<prg:variable>sob</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>'multiple' does not work exactly the same way as the ns-xml program specs says but...</prg:abstract>
				<prg:details>
					The 'multiple' keyword will allow the option to appear more than once and append option
					arguments in an array rather than
					overriding the previous value.
					<prg:br />
					However, getopt will not allow multiple argument at the same time
					<prg:block>--multi valueA valueB</prg:block>
					The option name have to be repeated for each value 
					<prg:block>--multi valueA --multi valueB</prg:block>
				</prg:details>
			</prg:documentation>
			<prg:names>
				<prg:long>multiple</prg:long>
				<prg:short>e</prg:short>
			</prg:names>
		</prg:multiargument>
		
		<!-- required -->
		<prg:argument required="true">
			<prg:databinding>
				<prg:variable>snif</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>Option without short name is natively supported</prg:abstract>
			</prg:documentation>
			<prg:names>
				<prg:long>no-short</prg:long>
			</prg:names>
		</prg:argument>

		<prg:argument>
			<prg:databinding>
				<prg:variable>prrrt</prg:variable>
			</prg:databinding>
			<prg:documentation>
				<prg:abstract>Option without long name is not really supported</prg:abstract>
				<prg:details>But we can use th short name for both long and short</prg:details>
			</prg:documentation>
			<prg:names>
				<prg:short>f</prg:short>
			</prg:names>
		</prg:argument>
		
		<!-- Simple exclusive group -->
		<prg:group type="exclusive">
			<prg:documentation>
				<prg:abstract>A simple exclusive group</prg:abstract>
				<prg:details>
					This is the group description.
					<prg:br />
					Line breaks are supported
					<prg:block>
						Block too..
						<prg:block>Even nested blocks</prg:block>
					</prg:block>
					Some "characters" like double quotes are escaped.
				</prg:details>
			</prg:documentation>
			<prg:options>
				<prg:argument>
					<prg:documentation>
						<prg:abstract>Group option A</prg:abstract>
					</prg:documentation>
					<prg:names>
						<prg:long>grp1a</prg:long>
					</prg:names>
				</prg:argument>
				
				<!-- typestr -->
				<prg:argument>
					<prg:documentation>
						<prg:abstract>Group option B</prg:abstract>
						<prg:details>The type definition (path) will be translated in a simple hint string</prg:details>
					</prg:documentation>
					<prg:names>
						<prg:long>grp1b</prg:long>
					</prg:names>
					<prg:type>
						<prg:path />
					</prg:type>
				</prg:argument>

				<prg:switch>
					<prg:documentation>
						<prg:abstract>Switches in group are not supported</prg:abstract>
						<prg:details>
							See the -b option help above.
						</prg:details>
					</prg:documentation>
					<prg:names>
						<prg:long>grp1c</prg:long>
					</prg:names>
				</prg:switch>
			</prg:options>
		</prg:group>

		<prg:group>
			<prg:documentation>
				<prg:abstract>A non-exclusive option group</prg:abstract>
				<prg:details>
					Such type of group will be simply flattened
					<prg:endl />
					The &lt;abstract&gt; element will serve as a section text and the &lt;details&gt; element as a section text
				</prg:details>
			</prg:documentation>
			<prg:options>
				<prg:argument>
					<prg:documentation>
						<prg:abstract>Group 2 option A - Non-strict select</prg:abstract>
						<prg:details>A non-strict select is totally ignored.</prg:details>
					</prg:documentation>
					<prg:names>
						<prg:long>grp2a</prg:long>
					</prg:names>
					<prg:select>
						<prg:option>one</prg:option>
						<prg:option>two</prg:option>
						<prg:option>three</prg:option>
						<prg:option>four values</prg:option>
					</prg:select>
				</prg:argument>

				<prg:argument>
					<prg:documentation>
						<prg:abstract>Group 2 option B - strict select</prg:abstract>
						<prg:details>A 'restricted' select is translated into a enum.</prg:details>
					</prg:documentation>
					<prg:names>
						<prg:long>grp2b</prg:long>
					</prg:names>
					<prg:select restrict="true">
						<prg:option>one</prg:option>
						<prg:option>two</prg:option>
						<prg:option>three</prg:option>
						<prg:option>four values</prg:option>
					</prg:select>
				</prg:argument>
			</prg:options>
		</prg:group>

	</prg:options>
</prg:program>


